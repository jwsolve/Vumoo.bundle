import os,sys

try:
	path = os.getcwd().split("?\\")[1].split('Plug-in Support')[0]+"Plug-ins\Vumoo.bundle\Contents\Services\URL\Vumoo\Modules"
except:
	path = os.getcwd().split("Plug-in Support")[0]+"Plug-ins/Vumoo.bundle/Contents/Services/URL/Vumoo/Modules"
if path not in sys.path:
	sys.path.append(path)

from aadecode import AADecoder
import jsbeautifier

########################################################################################
def NormalizeURL(url):

	return url

########################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url)
	title = page.xpath("//h3[@class='movie_title']/span/text()")[0]
	description = page.xpath("//div[contains(@class,'movie_detail_info')]/p/text()")[0]
	thumb = page.xpath("//img[contains(@class,'mov_poster')]/@src")[0]
	rating = page.xpath("//b[@class='imdb_rating']/text()")[0]	

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb,
		rating = float(rating)
	)

########################################################################################
def MediaObjectsForURL(url):

	return [
        	MediaObject(
			parts = [
				PartObject(
					key = 
						Callback(
							PlayVideo,
							url = url,
							fmt = 'hi',
							post_url = url
						)
					)
				]
			)
	]

########################################################################################
@indirect
def PlayVideo(url, fmt):

	page = HTML.ElementFromURL(url)
	iframe_src = page.xpath("//iframe/@src")[1]
	loadframe = HTML.ElementFromURL(iframe_src)
	aascript = loadframe.xpath("//script/text()")[4]
	string = AADecoder(str(aascript)).decode()
	video_url = string.replace('window.vr ="','',1).replace('";window.vt ="video/mp4" ;','',1)

	return IndirectResponse(VideoClipObject, key=video_url)

